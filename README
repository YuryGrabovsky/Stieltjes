This is a FORTRAN code that reconstructs a Stieltjes function f(z) from a
limited number of its measured values at specified points z_j in the complex
upper half plane (UHP). The measured values w_j of f(z_j) may contain
measurement errors. The code computes the Stieltjes function f(z) that
minimizes sum[|f(z_j)-w_j|^2] as well as the "certificate of optimality" that
I call the "Caprini function". The Stieltjes function f(z) is computed in two
ways (which agree in test cases I ran). The first way is a list of values
f(zeta_j) at specified points zeta_j in the UHP. The second is the spectral
representation of f(z): f(z) = gamma - s0/z + sum[s(j)/(pole(j)-z)]. The
program also computes 500 Monte-Carlo reconstructions of f(z) simulating
different realizations of random measurement errors to show the uncertainty in
the reconstruction of f(z). The algorithm is described in the paper by Yury
Grabovsky "Reconstructing Stieltjes functions from their approximate values: a
search for a needle in a hay stack."  See
https://www.math.temple.edu/~yury/Stieltjes.pdf The FORTRAN source code
implements the algorithm and the description below would be of little use
without some understanding of the algorithm and what it does. One particular
application to the electrochemical impedance spectroscopy is also
implemented. See README_Voigt.

* The source needs to be compiled against the lapack libraries liblapack.a and
librefblas.a. The lapack sources are available from www.netlib.org/lapack/index.html
Download the sources, untar
> cd lapack-<version>
> cp INSTALL/make.inc.gfortran make.inc 
> make
This will create liblapack.a and librefblas.a that are needed to compile my
sources using
> gfortran Stieltjes_functions.f Stieltjes_Caprini.f *.f90 <path>/*.a
where path is the path to lapack libraries meantioned above. The source needs
to be compiled with gfortran 2 times in order to generate the .mod files from
the nnls.f90 and constant.f90 modules. The second time there should be no
compilation errors.

* The code consists of the main program Stieltjes_Caprini.f that reads the
input from text files, launches the algorithm, and writes the output to text
files. No FORTRAN interface to gui or graphics engine is implemented. The
graphs can be generated by any graphing software that will read the text files 
generated by the FORTRAN program. The algorithm uses my own code  contained in 
Stieltjes_functions.f and the following included 3rd party software: 
- NNLS5n.f90 by Alan Miller (In public domain). It solves nonnegative linear
  least squares problems. Obtained from https://jblevins.org/mirror/amiller
  I had to change itmax from 3*n to 5*n, so that nnls does not exit as often
  on iteration count.
- normal.f90 by John Burkardt (GNU LGPL license) for generating independent
  N(0,1) random variables. Obtained from
   https://people.sc.fsu.edu/~jburkardt/f_src/normal/normal.html
- Suitably modified BrentRoots by J-P Moreau (www.jpmoreau.fr) for root
  finding (which is probably how it was meant to be used)
- quicksort.f90 by M.J. Rutter (Obtained from https://www.mjr19.org.uk/IT/sorts/)

* I include a python program PythonGrapher, written by Phillip
  Grabovsky that reads the output files and presents the
  results graphically, but of course, the numbers can just as easily be read
  into any other graphing program. Nyquist_plot.jpg shows the output.
  In order to use the PythonGrapher one needs python 3.x and the python
  packages listed in python_reqs.txt. To install them insall pip (Python
  package manager) and type 
> pip install -r python_reqs.txt
  Now after running the Fortran code the results can be plotted with
> python -u PythonGrapher.py

* The main program Stieltjes_Caprini.f reads the input data from two files
exp_data.txt and extr_zs.txt and outputs the results to either 4 files 
W_extr.txt, spectral_measure.txt, data_sizes.txt, and pout.txt, or 5 files 
(add WMC.txt) or 7 files (add tC.txt and wfix.txt).
- W_extr.txt contains real and imaginary parts of f(zeta_j) for
  some Stieltjes function f(z).
- pout.txt contains real and imaginary parts of p in V(z), which is in a
  sense closest point in V(z) to w.
- WMC.txt contains real and imaginary parts of f(zeta_j) for different
  Monte Carlo realizations of f(z), quantifying the uncertainty in determination
  of f(zeta_j).
- spectral_measure.txt contains spectral representation of f(z). The first
  line is either -1.0 gamma, or 0.0 gamma, indicating whether the certificate
  of optimality (the graph of the Caprini function) is computed (-1=computed). 
  The second line is 0.0 s0. The remaining lines are pole(j) and s(j) for
  f(z) = gamma -s0/z + sum[s(j)/(pole(j)-z)]
- tC.txt contains t(j) and C(t(j)), where t(j) is the discretization (on
  the log scale of [0,+infty) and C(t) is the Caprini function certifying
  optimality.
- wfix.txt contains the "alternative data", which are close the the
  original one but for which p in V(z) is the closest point.

